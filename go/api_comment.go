/*
 * Simple blog
 * API version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"encoding/json"
	"errors"
	"fmt"
	"log"
	"net/http"
	"net/url"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/boltdb/bolt"
	"github.com/dgrijalva/jwt-go"
	"github.com/dgrijalva/jwt-go/request"
)

type UserSlice []Comment

func (s UserSlice) Len() int {
	return len(s)
}
func (s UserSlice) Less(i, j int) bool {
	return s[i].Date > s[j].Date
}
func (s UserSlice) Swap(i, j int) {
	s[i], s[j] = s[j], s[i]
}

func CreateComment(w http.ResponseWriter, r *http.Request) {
	fmt.Println("CreateComment")
	//连接数据库
	db, err := bolt.Open("my.db", 0600, nil)
	if err != nil {
		log.Fatal(err)
	}
	defer db.Close()

	//解析 url，取到参数 articleId
	articleId := strings.Split(r.URL.Path, "/")[4]
	fmt.Println("ArticleIdstring:", articleId)

	// string to int
	Id, err := strconv.Atoi(articleId)
	if err != nil {
		fmt.Println("Get Id failed")
		response := InlineResponse404{err.Error()}
		JsonResponse(response, w, http.StatusBadRequest)
		return
	}

	//打开 article 表查找是否有文章 id 为该 Id 的文章，
	//找到则显示文章的Id，否则返回相应的错误信息
	var article Article
	err = db.View(func(tx *bolt.Tx) error {
		b := tx.Bucket([]byte("Article"))
		if b != nil {
			v := b.Get(itob(Id))
			if v == nil {
				return errors.New("Article Not Exists")
			} else {
				_ = json.Unmarshal(v, &article)
				return nil
			}
		}
		return errors.New("Article Not Exists")
	})

	if err != nil {
		fmt.Println("Article Not Exists")
		response := InlineResponse404{err.Error()}
		JsonResponse(response, w, http.StatusBadRequest)
		return
	}
	fmt.Println("articleid:", article.Id)

	//写新的评论，并判断它的合法性，如果正确则显示评论，错误则返回相应的错误信息
	comment := Comment{
		Date:      time.Now().Format("2006-01-02 15:04:05"),
		Content:   "",
		Author:    "",
		ArticleId: int32(Id),
	}
	err = json.NewDecoder(r.Body).Decode(&comment)

	if err != nil || comment.Content == "" {
		w.WriteHeader(http.StatusBadRequest)
		if err != nil {
			response := InlineResponse404{err.Error()}
			JsonResponse(response, w, http.StatusBadRequest)
		} else {
			response := ErrorResponse{"There is no content in your article"}
			JsonResponse(response, w, http.StatusBadRequest)
		}
		return
	} else {
		fmt.Println("comment:", comment)
	}

	//先对request请求的token进行解析
	token, err := request.ParseFromRequest(r, request.AuthorizationHeaderExtractor,
		func(token *jwt.Token) (interface{}, error) {
			fmt.Println(token)
			return []byte(comment.Author), nil
		})
	fmt.Println(token)

	if err == nil {
		//通过以下方法做到服务端对于客户端保存当前登陆用户的 token 的校验
		if token.Valid {
			err = db.Update(func(tx *bolt.Tx) error {
				b, err := tx.CreateBucketIfNotExists([]byte("Comment"))
				if err != nil {
					return err
				}
				id, _ := b.NextSequence()
				encoded, err := json.Marshal(comment)
				var str string
				str = strconv.Itoa(Id) + "_" + strconv.Itoa(int(id))
				return b.Put([]byte(str), encoded)
			})
			if err != nil {
				response := InlineResponse404{err.Error()}
				JsonResponse(response, w, http.StatusBadRequest)
				return
			}
			JsonResponse(comment, w, http.StatusOK)
		} else {
			response := ErrorResponse{"Token is not valid"}
			JsonResponse(response, w, http.StatusUnauthorized)
		}
	} else {
		response := ErrorResponse{"Unauthorized access to this resource"}
		JsonResponse(response, w, http.StatusUnauthorized)
	}

}

//  http://localhost:8080/user/article/1/comments?page=1
func GetCommentsOfArticle(w http.ResponseWriter, r *http.Request) {
	//连接数据库
	db, err := bolt.Open("my.db", 0600, nil)
    if err != nil {
        log.Fatal(err)
    }
	defer db.Close()
	
	//解析 url，取到参数 Id
	articleId := strings.Split(r.URL.Path, "/")[4]
	temp, err := strconv.Atoi(articleId)
	var Id int = int(temp)
	if err != nil {
		reponse := InlineResponse404{err.Error()}
		JsonResponse(reponse, w, http.StatusNotFound)
		return
	}

	//解析 url，取到参数page
	u, err := url.Parse(r.URL.String())
	if err != nil {
		log.Fatal(err)
	}
	m, _ := url.ParseQuery(u.RawQuery)
	page := m["page"][0]
	index, err := strconv.Atoi(page)

	//打开 article 表查找是否有文章 id 为该 Id 的文章，
	//找到则返回该文章，否则返回相应的错误信息
	var article []byte
	err = db.View(func(tx *bolt.Tx) error {
		b := tx.Bucket([]byte("Article"))
		if b != nil {
			v := b.Get(itob(Id))
			if v == nil {
				return errors.New("Article Not Exists")
			} else {
				article = v
				return nil
			}
		} else {
			return errors.New("Article Not Exists")
		}
	})

	if err != nil {
		response := InlineResponse404{err.Error()}
		JsonResponse(response, w, http.StatusNotFound)
		return
	}

	//查找该文章Id对应的评论
	//符合要求则加入comments，否则返回错误信息
	var comments Comments
	var comment Comment
	err = db.View(func(tx *bolt.Tx) error {
		b := tx.Bucket([]byte("Comment"))
		if b != nil {
			c := b.Cursor()

			for k, v := c.First(); k != nil; k, v = c.Next() {
				err = json.Unmarshal(v, &comment)
				if err != nil {
					return err
				}
				if int(comment.ArticleId) == Id {
					comments.Contents = append(comments.Contents, comment)
				}
			}

			return nil
		} else {
			return errors.New("Comment Not Exists")
		}
	})

	if err != nil {
		reponse := InlineResponse404{err.Error()}
		JsonResponse(reponse, w, http.StatusNotFound)
		return
	}
	
	//计算评论长度和评论页数
	contentsCount := len(comments.Contents)
	comments.PageCount = contentsCount

	sort.Sort(UserSlice(comments.Contents))

	if contentsCount <= (index-1)*5 {
		err := errors.New("Page is out of index")
		response := ErrorResponse{err.Error()}
		JsonResponse(response, w, http.StatusNotFound)
		return
	}

	var end int
	if index*5 < contentsCount {
		end = index * 5
	} else {
		end = contentsCount
	}

	comments.Contents = comments.Contents[(index-1)*5 : end]
	JsonResponse(comments, w, http.StatusOK)
}
